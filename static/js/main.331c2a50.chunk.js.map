{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","components/App.jsx","index.js"],"names":["Header","react_default","a","createElement","Highlight_default","Footer","year","Date","getFullYear","Note","props","className","title","content","onClick","onDelete","id","DeleteRounded_default","CreateArea","_useState","useState","_useState2","Object","slicedToArray","isExpanded","setIsExpanded","_useState3","_useState4","note","setNote","handleChange","event","_event$target","target","name","value","prevValue","objectSpread","defineProperty","onChange","placeholder","rows","Zoom","in","Fab","onAdd","preventDefault","Add_default","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","components_Header","components_CreateArea","newNote","concat","toConsumableArray","map","components_Note","key","components_Footer","ReactDOM","render","components_App","document","getElementById"],"mappings":"yMAWeA,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,MAAJ,YCKSG,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACEP,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,6BAAgBG,sBCgBPG,MAnBf,SAAcC,GAMZ,OACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACbV,EAAAC,EAAAC,cAAA,UAAKO,EAAME,OACXX,EAAAC,EAAAC,cAAA,SAAIO,EAAMG,SACVZ,EAAAC,EAAAC,cAAA,UACAW,QAAS,WACPJ,EAAMK,SAASL,EAAMM,MAEtBf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,yDCkDQgB,MA7Df,SAAoBR,GAAO,IAAAS,EAGWC,oBAAS,GAHpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGlBK,EAHkBH,EAAA,GAGNI,EAHMJ,EAAA,GAAAK,EAKDN,mBAAS,CAC/BR,MAAM,GACNC,QAAQ,KAPec,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKlBE,EALkBD,EAAA,GAKZE,EALYF,EAAA,GAUzB,SAASG,EAAaC,GAAM,IAAAC,EACJD,EAAME,OAArBC,EADmBF,EACnBE,KAAMC,EADaH,EACbG,MAIbN,EAAQ,SAAAO,GACN,OAAOd,OAAAe,EAAA,EAAAf,CAAA,GACFc,EADLd,OAAAgB,EAAA,EAAAhB,CAAA,GAEGY,EAAOC,MAgBd,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,eACba,GAAcvB,EAAAC,EAAAC,cAAA,SACf+B,KAAK,QACLK,SAAUT,EACVK,MAAOP,EAAKhB,MACZ4B,YAAY,UAGZvC,EAAAC,EAAAC,cAAA,YACA+B,KAAK,UACLK,SAAUT,EACVhB,QAAS,WACPW,GAAc,IAEhBU,MAAOP,EAAKf,QACZ2B,YAAY,iBAAiBC,KAAMjB,EAAa,EAAI,IAEtDvB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMC,GAAInB,GACRvB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAK9B,QA9BX,SAAoBiB,GAElBrB,EAAMmC,MAAMjB,GACZC,EAAQ,CACNjB,MAAM,GACNC,QAAQ,KAEVkB,EAAMe,mBAuByB7C,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,WCNpB8C,MAhDf,WAAe,IAAA7B,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN8B,EADM5B,EAAA,GACC6B,EADD7B,EAAA,GAYb,SAAS8B,EAAWnC,GAClBkC,EAAS,SAACE,GACR,OAAOA,EAAUC,OAAO,SAACC,EAAUC,GACjC,OAAOA,IAAUvC,MAKvB,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAYZ,MApBhB,SAAiBa,GACfR,EAAS,SAACE,GACR,SAAAO,OAAArC,OAAAsC,EAAA,EAAAtC,CAAW8B,GAAX,CAAsBM,SA2BrBT,EAAMY,IAAI,SAACP,EAAUC,GACpB,OACEtD,EAAAC,EAAAC,cAAC2D,EAAD,CACEC,IAAKR,EACLvC,GAAIuC,EACJ3C,MAAO0C,EAAS1C,MAChBC,QAASyC,EAASzC,QAClBE,SAAUoC,MAIhBlD,EAAAC,EAAAC,cAAC6D,EAAD,QC7CNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.331c2a50.chunk.js","sourcesContent":["import React from \"react\";\nimport HighlightIcon from '@mui/icons-material/Highlight';\n\nfunction Header() {\n  return (\n    <header>\n      <h1><HighlightIcon />Keeper</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {year}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport DeleteIcon from \"@mui/icons-material/DeleteRounded\";\n\nfunction Note(props) {\n\n  // function handleClick(){\n  //   props.onDelete(props.id);\n  // }\n\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      <button\n      onClick={() => {\n        props.onDelete(props.id);\n      }}\n      ><DeleteIcon /></button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, {useState} from \"react\";\nimport AddIcon from '@mui/icons-material/Add';\nimport Fab from '@mui/material/Fab';\nimport Zoom from '@mui/material/Zoom';\n\n\nfunction CreateArea(props) { //1. Create a constant that keeps track of the title and content.\n  //props.onAdd is the function that is passed from the App component.\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const [note, setNote] = useState({ // useState is a hook that allows us to use state in functional components (instead of class components) \n    title:\"\",// we are using an object to store the title and content of the note\n    content:\"\"\n  });\n\n  function handleChange(event){\n    const {name, value} = event.target;// in the name there are two values: title and content\n    // and value the text that the user types in the textarea field\n\n    //setNote is a function thaSt allows us to change the value of the note object.\n    setNote(prevValue =>{                //prevValue is the previous value of the note and => is the arrow function \n      return {\n        ...prevValue,                   //spread operator. It copies the previous value of the note  and then we can add the new value to it.. because we are not changing the previous value of the note, we are just adding the new value to it. That's why we are using spread operator. if we use = instead of spread operator, then the previous value of the note will be replaced by the new value.\n        [name]: value                   //name is title or content and value is the value of the input field. because we have two input fields, we need to use name to differentiate between them. bec we have two input fields, we need to use name to differentiate between them. because we have two input fields, we need to use name to differentiate between them.\n      }\n    })\n  }\n\n  //2. Pass the new note back to the App.\n  function sumbitNote(event){\n\n    props.onAdd(note); //pass the new note back to the App.\n    setNote({\n      title:\"\",\n      content:\"\"\n    });\n    event.preventDefault();// this is to prevent the page from refreshing when we click the button.\n  }\n\n  return (\n    <div>\n      <form className=\"create-note\">\n        {isExpanded && <input \n        name=\"title\" \n        onChange={handleChange} \n        value={note.title} \n        placeholder=\"Title\" \n        />\n        }\n        <textarea \n        name=\"content\" //name is used to identify the input field in the event handler function \n        onChange={handleChange}\n        onClick={() => {\n          setIsExpanded(true);\n        }}//when the user clicks on the textarea field, the setIsExpanded function is called and the value of the isExpanded constant is set to true.\n        value={note.content} \n        placeholder=\"Take a note...\" rows={isExpanded ? 3 : 1 } //rows is for the height of the text area\n        />\n      <Zoom in={isExpanded}>\n        <Fab onClick={sumbitNote} ><AddIcon /></Fab>\n        </Zoom>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  function addNote(newNote) {\n    setNotes((prevNotes) => {\n      return [...prevNotes, newNote];\n    });\n  }\n\n  //4. Delete the note from the App.\n  //we are passing the id of the note that we want to delete to the onDelete function.\n\n  function deleteNote(id) {\n    setNotes((prevNotes) => {\n      return prevNotes.filter((noteItem, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea onAdd={addNote} />\n      {/* //3. Render the notes. */}\n      {/* //we are passing the notes array to the Note component \n      //and then we are mapping through the array and rendering each note \n      // noteItem is the name of the array item. \n      // index in map is a second parameter that is the index of the array item.when we are mapping through the array, we are passing the index of the array item to the Note component as a key. \n      // can be used as a unique identifier for the array item. \n      // which help in deleting the note from the App.\n      */}\n      {notes.map((noteItem, index) => {\n        return (\n          <Note\n            key={index}\n            id={index}\n            title={noteItem.title}\n            content={noteItem.content}\n            onDelete={deleteNote} //we are passing the onDelete function to the Note component so that we can delete the note from the App.\n          />\n        );\n      })}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//1. Implement the add note functionality.\n//- Create a constant that keeps track of the title and content.\n//- Pass the new note back to the App.\n//- Add new note to an array.\n//- Take array and render seperate Note components for each item.\n\n//2. Implement the delete note functionality.\n//- Callback from the Note component to trigger a delete function.\n//- Use the filter function to filter out the item that needs deletion.\n//- Pass a id over to the Note component, pass it back to the App when deleting.\n\n//This is the end result you're aiming for:\n//https://pogqj.csb.app/\n"],"sourceRoot":""}